/*=============================================================================
	MotionVelocityShader.usf: Calculates velocity vectors.
	Copyright 1998-2010 Epic Games, Inc. All Rights Reserved.
=============================================================================*/

#include "Common.usf"
#include "Material.usf"
#include "VertexFactory.usf"


/*=============================================================================
 * Vertex Shader
 *============================================================================*/

float4x4 PrevViewProjectionMatrix;
float4 StretchTimeScale = { 1.0f, 0.0f, 0.0f, 0.0f };

struct FVertexOutput
{
	// xy for object, zw for camera (relative motion in -1.1 screen space)
    float4 ScreenVelocity : TEXCOORD6;
	FVertexFactoryInterpolants FactoryInterpolants;	
};

void MainVertexShader( FVertexFactoryInput Input, out FVertexOutput Output, out float4 Position : POSITION)
{
	FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);
	float4 WorldPosition		= VertexFactoryGetWorldPosition( Input, VFIntermediates );
	float3x3 TangentBasis		= VertexFactoryGetTangentBasis( Input, VFIntermediates );

	FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, WorldPosition.xyz, TangentBasis);
	// Isolate instructions used for world position offset on xbox 360, 
	// As these cause the optimizer to generate different position calculating instructions in each pass, resulting in self-z-fighting.
	// This is only necessary for shaders used in passes that have depth testing enabled.
	ISOLATE
	{
		WorldPosition.xyz += GetMaterialWorldPositionOffset(VertexParameters);
	}

	Output.FactoryInterpolants	= VertexFactoryGetInterpolants( Input, VFIntermediates );
	float4 PrevWorldPosition	= VertexFactoryGetPreviousWorldPosition( Input, VFIntermediates );	

	VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, PrevWorldPosition.xyz, TangentBasis);
	PrevWorldPosition.xyz += GetMaterialWorldPositionOffset(VertexParameters);

//@todo - this causes primitives stretching to infinity
#if 0
	// Calculate world-space normal vector
	float3 WorldNormal			= VertexFactoryGetWorldNormal( Input );
	// Calculate world-space velocity vector in units/sec.
	float3 WorldVelocity = (WorldPosition.xyz - PrevWorldPosition.xyz);
	// Is the normal pointing backwards?
 	if ( dot(WorldNormal, WorldVelocity) < 0 )
 	{
 		// Stretch the polygon back and let the velocity interpolate between actual velocity and 0.
 		Position				= MulMatrix( ViewProjectionMatrix, WorldPosition - WorldVelocity.xyzz*StretchTimeScale.xxxw );
 		Output.PrevPosition		= Position;
		Output.CurrPosition		= Position;
 	}
 	else
#endif
	{
		float4 ScreenPosition			= MulMatrix(     ViewProjectionMatrix, float4(WorldPosition.xyz, 1) );
		float4 PrevScreenPositionObj	= MulMatrix(     ViewProjectionMatrix, float4(PrevWorldPosition.xyz, 1));
		float4 PrevScreenPositionCam	= MulMatrix( PrevViewProjectionMatrix, float4(WorldPosition.xyz, 1));

		Position = ScreenPosition;

		float2 ScrPos = ScreenPosition.xy / ScreenPosition.w;

		// object motion vector
		Output.ScreenVelocity.xy = ScrPos - PrevScreenPositionObj.xy / PrevScreenPositionObj.w;
		// camera motion vector
		Output.ScreenVelocity.zw = ScrPos - PrevScreenPositionCam.xy / PrevScreenPositionCam.w;
	}

	// Move all geometry a little bit towards the camera.
	Position.z += StretchTimeScale.y * Position.w;
}


/*=============================================================================
 * Pixel Shader
 *============================================================================*/

// set by C++
// xy for the instance scale, zw for the camera scale (includes y flip for both scale)
float4 IndividualVelocityScale;
 
void MainPixelShader(
	in FVertexOutput Input,
	OPTIONAL_FacingSign
	OPTIONAL_PixelShaderScreenPosition
	out float4 OutColor : COLOR0
	)
{
	// Manual clipping here (alpha-test, etc)
	FMaterialPixelParameters MaterialParameters = GetMaterialPixelParameters( Input.FactoryInterpolants );
	CalcMaterialParameters( MaterialParameters, FacingSign, float4(0,0,1,0), float4(0,0,.00001f,1));
	GetMaterialClipping( MaterialParameters, PixelShaderScreenPosition.xy );

	// xy for object, zw for camera (relative motion in -1.1 screen space)
	half4 PackedVelocity = Input.ScreenVelocity;

	// Scale by opacity
	PackedVelocity.xy *= GetMaterialOpacity( MaterialParameters );

	// Scale by UPrimitiveComponent::MotionBlurScale and view parameters, includes y flip
	PackedVelocity *= IndividualVelocityScale;

	// final = object + camera
	half2 Velocity = PackedVelocity.xy + PackedVelocity.zw;

	// clamp motion vector in a disc from -1 to 1 (the maximum motion vector range)
	{
		half Len = dot(Velocity, Velocity);
		FLATTEN if(Len > 1)
		{
			Velocity *= rsqrt(Len);
		}
	}

	// Map [-1,1] to [0,1].
	// x: -1=left .. 1=right, y: -1=up .. 1=down
	Velocity	= Velocity * 0.5f + 0.5f;
	// R: 0=left .. 1=right, G: 0=up .. 1=down
	OutColor = float4(Velocity, 0, 0);
}
